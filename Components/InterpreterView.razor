@using RamMachineInterpreter.Data
@using System.ComponentModel.DataAnnotations;
@using System.Diagnostics.CodeAnalysis;
@using System.Diagnostics;
@using System.Web;
@using System.Text.RegularExpressions;

@typeparam TInterpreter where TInterpreter : IInterpreter<TMemory, TInstructionSet, TOperation, TAttribute, T>, new()
@typeparam TMemory where TMemory : IMemory<T>
@typeparam TInstructionSet where TInstructionSet : IInstructionSet<TOperation, TAttribute, T>
@typeparam TAttribute where TAttribute : OperationAttribute
@typeparam TOperation where TOperation : IOperation<T>
@typeparam T where T : struct


<MudText Typo="Typo.h1" Align="Align.Center" GutterBottom>@Title</MudText>

@if (IsLoading)
{
	<div class="w-100 d-flex align-items-center">
		<MudProgressCircular Size="Size.Large" Indeterminate Class="m-auto"/>
	</div>
}else
{
	<EditForm Model="@Code" class="d-flex flex-column align-items-stretch">
		<MudExpansionPanels Elevation="1" Square Class="mb-5" MultiExpansion>
		<!-- SETTINGS -->
			<MudExpansionPanel Text="Settings" Class="">
				<ChildContent>
					<MudGrid>
						<MudItem md="3">
							<div class="d-flex flex-column">
								<p>Delay between each instruction:</p>
								<MudSlider T="int" Step="@DELAY_STEP" Min="@MIN_DELAY" Max="@MAX_DELAY" TickMarks TickMarkLabels="@GetDelayLabels()" @bind-Value="@Delay"/>
							</div>
						</MudItem>
					</MudGrid>
				</ChildContent>
			</MudExpansionPanel>
			<MudExpansionPanel Text="Instruction Set">
				<InstructionsView InstructionSet="Interpreter.InstructionSet" T="T" TInstructionSet="TInstructionSet" TAttribute="TAttribute" TOperation="TOperation"/>
			</MudExpansionPanel>
		</MudExpansionPanels>


		<!-- CODE & INPUTS -->
		<MudGrid>
			<MudItem md="8" sm="7" xs="12">
				<MudTextField Lines="24" @bind-Value="@Code" Label="Code"/>
			</MudItem>	
			<MudItem md="4" sm="5" xs="12">
				<MudTextField Lines="24" @bind-Value="@Input" Label="Input Values"/>
			</MudItem>	
		</MudGrid>


		<MudGrid>
			<MudItem md="8" sm="7" xs="12">
				<MudButton FullWidth Disabled="@IsRunning" OnClick="Run" StartIcon="@Icons.Material.Filled.PlayArrow">Run</MudButton>
			</MudItem>
			<MudItem md="4" sm="5" xs="12">
				<MudButton FullWidth Disabled="@(!IsRunning || InterruptionRequested)" OnClick="() => InterruptionRequested = true" StartIcon="@Icons.Material.Filled.Square">Interrupt</MudButton>
			</MudItem>
		</MudGrid>

		<MudDivider DividerType="DividerType.FullWidth"/>

		<div class="d-flex flex-column align-items-stretch">
			<h2>Output:</h2>
			<MudText GutterBottom>@((MarkupString)Regex.Replace(HttpUtility.HtmlEncode(@Output), "\r?\n|\r", "<br />"))</MudText>
			</div>

			<hr/>
			<div class="d-flex flex-column align-items-stretch">
				<h2>Memory:</h2>
				<MemoryView Memory="Interpreter.Memory"/>
			</div>
	</EditForm>
}

@code {
	private const int MIN_DELAY = 0, MAX_DELAY = 5000, DELAY_STEP = 200;
	bool IsLoading => Interpreter is null;

	[Parameter, Required, NotNull]
	public string? Title { get; set; }
	public TInterpreter Interpreter { get; set; } = new();
	private int Delay { get; set; } = 0;
	private string Code { get; set; } = "";
	private string Output { get; set; } = "";
	private string Input { get; set; } = "";
	private bool IsRunning { get; set; } = false;
	private bool InterruptionRequested { get; set; } = false;

	public string[] GetDelayLabels()
	{
		int ticks = 1 + (MAX_DELAY - MIN_DELAY) / DELAY_STEP;
		string[] labels = new string[ticks];
		int position = 0;

		for(int i = MIN_DELAY; i <= MAX_DELAY; i += DELAY_STEP)
		{
			labels[position] = i % 1000 == 0
				? $"{i / 1000}s"
				: "";
			position++;
		}

		return labels;
	}

	private async Task Run()
	{
		if(IsRunning)
			return;	

		Interpreter.Reset();
		InterruptionRequested = false;

		Output = "Parsing Code...";
		if (!TryCompile())
			return;	

		if(Interpreter.InstructionsCount == 0)
		{
			Output = "Nothing to Parse";
			return;
		}

		IsRunning = true;
		var inputs = Input
			.Split('\n')
			.Where(x => x.Length > 0)
			.ToArray();
		Interpreter.Inputs = inputs;
		Output = "";
		string? output = null;
		do
		{
			if (InterruptionRequested)
			{
				Output += "\n\nExecution interrupted.";
				break;
			}

			try {
				output = Interpreter.ExecuteNext();
			} catch(CommandException ex)
			{
				Output = "> Error: " + ex.Message;
				break;
			} catch(Exception ex)
			{
				Output = "An internal error occurred.";
				if(Debugger.IsAttached)
				{
					Output += "\n[DEBUG] " + ex.ToString();
				}
				break;
			}

			if(output is not null)
			{
				Output += "\n" + output;
			}
			
			StateHasChanged();

			if(Delay > 0)
			{
				await Task.Delay(Delay);
			}
		} while(Interpreter.Memory.InstructionRegister < Interpreter.InstructionsCount);

		IsRunning = false;
		StateHasChanged();
	}

	private bool TryCompile()
	{
		string[] code = Code.Split('\n');
		if(!Interpreter.TryLoadCode(code, out string[]? errors))
		{
			Output = "Parsing Failed:\n\n" + string.Join("\n\n- ", errors);
			StateHasChanged();
			return false;
		}
		return true;
	}
}
