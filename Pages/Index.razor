@page "/"
@using RamMachineInterpreter.Data;
@using System.Web;
@using System.Text.RegularExpressions;
@using System.Diagnostics;

<PageTitle>Index</PageTitle>


<MudText Typo="Typo.h1" Align="Align.Center" GutterBottom>RamMachine Interpreter</MudText>

<EditForm Model="@Code" class="d-flex flex-column align-items-stretch">
	<div class="d-flex flex-column align-items-stretch">
		<MudTextField Class="flex-fill" Lines="24" @bind-Value="@Code" Label="Code"/>
	</div>
	<div class="d-flex flex-column align-items-stretch">
		<MudTextField Class="flex-fill" Lines="8" @bind-Value="@Input" Label="Input Values"/>
	</div>

	@if(IsRunning)
	{
			<button class="btn btn-warning" @onclick="_interpreter.Interrupt">Interrupt</button>
	}
	else
	{
			<button class="btn btn-primary" @onclick="Run">Run</button>
	}
	<div class="d-flex flex-column align-items-stretch">
		<h2>Output:</h2>
		<p>@((MarkupString)Regex.Replace(HttpUtility.HtmlEncode(@Output), "\r?\n|\r", "<br />"))</p>
	</div>

	<div class="d-flex flex-column align-items-stretch">
		<h2>Memory:</h2>
		<MemoryView Memory="_interpreter?.Memory"/>
	</div>
</EditForm>


@code {
	private string Code { get; set; } = "STORE =10";
	private string Output { get; set; } = "";
	private string Input { get; set; } = "";
	private bool IsRunning { get; set; }
	private readonly Interpreter _interpreter = new();

	private void Run()
	{
		var inputs = Input
			.Split('\n')
			.Where(x => x.Length > 0);
		try
		{
			_interpreter.ParseCode(Code);
			IsRunning = true;
			base.StateHasChanged();
			string[] output = _interpreter.Execute(inputs);
			Output = string.Join('\n', output);
		}catch(CommandException ex)
		{
			Output = "ERROR: " + ex.Message;
		}catch(Exception ex)
		{
			Output = "An internal error occurred.";
			if(Debugger.IsAttached) {
				Output += "\n" + ex.Message;
			}
		}
		IsRunning = false;
	}
}
