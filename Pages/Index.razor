@page "/"
@using RamMachineInterpreter.Data;
@using System.Web;
@using System.Text.RegularExpressions;
@using System.Diagnostics;

<PageTitle>Index</PageTitle>


<MudText Typo="Typo.h1" Align="Align.Center" GutterBottom>RamMachine Interpreter</MudText>

<EditForm Model="@Code" class="d-flex flex-column align-items-stretch">

	<MudExpansionPanels Elevation="1" Square Class="mb-5">
	<!-- SETTINGS -->
		<MudExpansionPanel Text="Settings" Class="">
			<ChildContent>
				<MudGrid>
					<MudItem md="3">
						<div class="d-flex flex-column">
							<p>Delay between each instruction (seconds):</p>
							<MudSlider T="double" Step="0.1" Min="0" Max="3" @bind-Value="Delay" ValueLabel/>
						</div>
					</MudItem>
				</MudGrid>
			</ChildContent>
		</MudExpansionPanel>
	</MudExpansionPanels>


	<!-- CODE & INPUTS -->
	<MudGrid>
		<MudItem md="8" sm="7" xs="12">
			<MudTextField Lines="24" @bind-Value="@Code" Label="Code"/>
		</MudItem>	
		<MudItem md="4" sm="5" xs="12">
			<MudTextField Lines="24" @bind-Value="@Input" Label="Input Values"/>
		</MudItem>	
	</MudGrid>


	<MudGrid>
		<MudItem md="8" sm="7" xs="12">
			<MudButton FullWidth Disabled="@IsRunning" OnClick="Run" StartIcon="@Icons.Material.Filled.PlayArrow">Run</MudButton>
		</MudItem>
		<MudItem md="4" sm="5" xs="12">
			<MudButton FullWidth Disabled="@(!IsRunning)" OnClick="_interpreter.StopExecutionAsync" StartIcon="@Icons.Material.Filled.Square">Interrupt</MudButton>
		</MudItem>
	</MudGrid>

	<MudDivider DividerType="DividerType.FullWidth"/>

	<div class="d-flex flex-column align-items-stretch">
		<h2>Output:</h2>
		<MudText GutterBottom>@((MarkupString)Regex.Replace(HttpUtility.HtmlEncode(@Output), "\r?\n|\r", "<br />"))</MudText>
	</div>

	<hr/>
	<div class="d-flex flex-column align-items-stretch">
		<h2>Memory:</h2>
		<MemoryView Memory="_interpreter?.Memory"/>
	</div>
</EditForm>


	@code {
	private double Delay { get; set; } = 0.1;
	private string Code { get; set; } = 
		"READ 1  \t# Store the first input in 1\n" + 
		"LOAD =1\t# Set the Accumulator to =1\n" + 
		"STORE *1\t# Save the Accumulator value into the registry pointed at by 1\n" +
		"HALT";
	private string Output { get; set; } = "";
	private string Input { get; set; } = "13";
	private bool IsRunning => _interpreter.IsExecuting;
	private readonly RamMachineInterpreter _interpreter = new();
	private Task? _bgTask, _refresher;

	private void Run()
	{
		if (IsRunning)
		{
			Output = "Code is already running.\n\n" + Output;
		}

		_interpreter.Reset();
		Output = "Executing...";
		var inputs = Input
			.Split('\n')
			.Where(x => x.Length > 0);

		string[] code = Code.Split('\n');
		var errorLines = _interpreter.LoadCode(code);

		if(errorLines.Length > 0)
		{
			Output = "Parsing failed:" + string.Join("\n\n", errorLines);
			return;
		}

		_refresher = new(async() =>
		{
			int delay = Math.Min(10, (int)(Delay*1000));
			while(_interpreter.IsExecuting)
			{
				await Task.Delay(delay);
				await InvokeAsync(() => StateHasChanged());
			}
		});
		_refresher.Start();
		_bgTask = new Task(async() =>
		{
			try
			{
				var outputs = await _interpreter.ExecuteAsync(inputs);
				Output = string.Join("\n", outputs);
			}
			catch (CommandException ex)
			{
				Output = "ERROR: " + ex.Message;
			}
			catch (Exception ex)
			{
				Output = "An internal error occurred.";
				if (Debugger.IsAttached)
				{
					Output += "\n" + ex.ToString();
				}
			}
			await InvokeAsync(() => StateHasChanged());
		});
		
		_bgTask.ContinueWith((x) => {
			InvokeAsync(() => base.StateHasChanged());
		});

		_bgTask.Start();
	}

}
